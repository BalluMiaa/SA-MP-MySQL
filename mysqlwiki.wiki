Documentation for BlueG's MySQL plugin version R33 and later. Forum topic and download links can be found [http://forum.sa-mp.com/showthread.php?t=56564 here].

'''Lastest release:''' R34 (06/10/2013)

= ORM functions =
{{Note|A good tutorial for this system can be found [http://bit.ly/1e0WhIC here].}}


== orm_create ==
{{Description|Creates an ORM instance and returns its id.}}

{{Parameters|const table[], connectionHandle &#61; 1}}
{{Param|const table[]|The name of the table you wish to control.}}
{{Param|connectionHandle|The connection handle this will be processed on (optional).}}

{{Returns|ORM id on success, 0 on fail.}}

<pawn>
public OnPlayerConnect(playerid)
{
	new ORM:orm_id = Player[playerid][ORM_ID] = orm_create("players");
	return 1;
}
</pawn>


== orm_destroy ==
{{Description|Destroys an ORM instance.}}

{{Parameters|ORM:id}}
{{Param|ORM:id|The id of the ORM instance.}}

{{NoReturn}}

<pawn>
public OnPlayerDisconnect(playerid, reason)
{
	orm_destroy(Player[playerid][ORM_ID]);
	return 1;
}
</pawn>


== orm_errno ==
{{Description|Returns the error-id of the last ORM operation.}}

{{Parameters|ORM:id}}
{{Param|ORM:id|The id of the ORM instance.}}

{{Returns|Error id.}}


'''Available errors'''
{|
! Error ||  Meaning
|-
| ERROR_OK || No error happened.
|-
| ERROR_NO_DATA || No data has been found in the table.
|}


<pawn>
orm_select(Player[playerid][ORM_ID], "OnStuffSelected", "d", playerid);

public OnStuffSelected(playerid)
{
	switch(orm_errno(Player[playerid][ORM_ID])
	{
		case ERROR_OK:
			printf("There is no error.");
		case ERROR_NO_DATA:
			printf("No data in the table found.");
	}
	return 1;
}
</pawn>


== orm_apply_cache ==
{{Description|Applies the data of the active cache to an ORM instance.}}

{{Parameters|ORM:id, row}}
{{Param|ORM:id|The id of the ORM instance.}}
{{Param|row|The row index to take the cache data from.}}

{{NoReturn}}

<pawn>
new query[128];
format(query, sizeof(query), "SELECT * FROM `players` WHERE `id` = '%d'", Player[playerid][ID]);
mysql_tquery(MySQL, query, "OnStuffSelected", "d", playerid);

public OnStuffSelected(playerid)
{
	orm_apply_cache(Player[playerid][ORM_ID], 0);
	printf("Player %s has %d Money and is on PosX with %f.", Player[playerid][Name], Player[playerid][Money], Player[playerid][PosX]);
	return 1;
}
</pawn>


== orm_select ==
{{Description|Sends a SELECT query and applies the retrieved data to the previously registered variables.}}

{{Parameters|ORM:id, callback[] &#61; "", format[] &#61; "", {Float, _}:...}}
{{Param|ORM:id|The id of the ORM instance.}}
{{Param|callback[]|The name of the callback to call when the operation is done (optional).}}
{{Param|format[]|The format specifier for the callback (optional).}}
{{Param|{Float, _}:...|Indefinite number of parameters to pass to the callback (optional).}}

{{NoReturn}}

<pawn>
orm_select(Player[playerid][ORM_ID], "OnPlayerDataLoaded", "d", playerid);

public OnPlayerDataLoaded(playerid)
{
	printf("Player %s has %d Money and is on PosX with %f.", Player[playerid][Name], Player[playerid][Money], Player[playerid][PosX]);
	return 1;
}
</pawn>


== orm_update ==
{{Description|Sends an UPDATE query with the current values of the registered variables.}}

{{Parameters|ORM:id}}
{{Param|ORM:id|The id of the ORM instance.}}

{{NoReturn}}

<pawn>
orm_update(Player[playerid][ORM_ID]);
//this generates a query like "UPDATE `players` SET ´name´='PlayerName', `money`='23141', `pos_x`='231.432' WHERE `id`='42'" and executes it
</pawn>


== orm_insert ==
{{Description|Sends an INSERT query with the current values of the registered variables.}}

{{Parameters|ORM:id, callback[] &#61; "", format[] &#61; "", {Float, _}:...}}
{{Param|ORM:id|The id of the ORM instance.}}
{{Param|callback[]|The name of the callback to call when the operation is done (optional).}}
{{Param|format[]|The format specifier for the callback (optional).}}
{{Param|{Float, _}:...|Indefinite number of parameters to pass to the callback (optional).}}

{{NoReturn}}

<pawn>
orm_insert(Player[playerid][ORM_ID], "OnPlayerRegistered", "d", playerid);

public OnPlayerRegistered(playerid)
{
	printf("Player %s has registered with id %d.", Player[playerid][Name], Player[playerid][ID]);
	return 1;
}
</pawn>


== orm_delete ==
{{Description|Sends a DELETE query.}}

{{Parameters|ORM:id, bool:clearvars &#61; true}}
{{Param|ORM:id|The id of the ORM instance.}}
{{Param|bool:clearvars|True if the values of the registered variables should be set to zero (optional).}}

{{NoReturn}}

<pawn>
orm_delete(Player[playerid][ORM_ID]);
//this generates a query like "DELETE FROM `players` WHERE `id`='42'" and executes it
</pawn>


== orm_load ==
{{Description|Fetches data from a table and applies it to the previously registered variables. This function is technically the same as [[MySQL/R33#orm_select|orm_select()]].}}

{{Parameters|ORM:id, callback[] &#61; "", format[] &#61; "", {Float, _}:...}}
{{Param|ORM:id|The id of the ORM instance.}}
{{Param|callback[]|The name of the callback to call when the operation is done (optional).}}
{{Param|format[]|The format specifier for the callback (optional).}}
{{Param|{Float, _}:...|Indefinite number of parameters to pass to the callback (optional).}}

{{NoReturn}}

<pawn>
orm_load(Player[playerid][ORM_ID], "OnPlayerDataLoaded", "d", playerid);

public OnPlayerDataLoaded(playerid)
{
	printf("Player %s has %d Money and is on PosX with %f.", Player[playerid][Name], Player[playerid][Money], Player[playerid][PosX]);
	return 1;
}
</pawn>


== orm_save ==
{{Description|Saves data to a table. This function is a combination of [[MySQL/R33#orm_insert|orm_insert()]] and [[MySQL/R33#orm_update|orm_update()]]. If the previously specified key variable has a valid value, orm_save calls [[MySQL/R33#orm_update|orm_update]], else [[MySQL/R33#orm_insert|orm_insert]].}}

{{Parameters|ORM:id, callback[] &#61; "", format[] &#61; "", {Float, _}:...}}
{{Param|ORM:id|The id of the ORM instance.}}
{{Param|callback[]|The name of the callback to call when the operation is done (optional).}}
{{Param|format[]|The format specifier for the callback (optional).}}
{{Param|{Float, _}:...|Indefinite number of parameters to pass to the callback (optional).}}

{{NoReturn}}

<pawn>
Player[playerid][Money] = GetPlayerMoney(playerid);
orm_save(Player[playerid][ORM_ID]);
</pawn>


== orm_addvar_int ==
{{Description|Registers an integer variable to an ORM instance and links it to the specified field.}}

{{Parameters|ORM:id, &var, varname[]}}
{{Param|ORM:id|The id of the ORM instance.}}
{{Param|&var|The variable to register.}}
{{Param|varname[]|The name of the field in the MySQL table.}}

{{NoReturn}}

<pawn>
new ORM:ormid = orm_create("players");

orm_addvar_int(ormid, Player[playerid][ID], "id");
orm_addvar_int(ormid, Player[playerid][Money], "money");
</pawn>


== orm_addvar_float ==
{{Description|Registers a floating point variable to an ORM instance and links it to the specified field.}}

{{Parameters|ORM:id, &var, varname[]}}
{{Param|ORM:id|The id of the ORM instance.}}
{{Param|&Float:var|The variable to register.}}
{{Param|varname[]|The name of the field in the MySQL table.}}

{{NoReturn}}

<pawn>
new ORM:ormid = orm_create("players");

orm_addvar_float(ormid, Player[playerid][PosX], "pos_x");
orm_addvar_float(ormid, Player[playerid][PosY], "pos_y");
</pawn>


== orm_addvar_string ==
{{Description|Registers a string variable to an ORM instance and links it to the specified field.}}

{{Parameters|ORM:id, &var, var_maxlen, varname[]}}
{{Param|ORM:id|The id of the ORM instance.}}
{{Param|&var|The variable to register.}}
{{Param|var_maxlen|The size of the registered variable.}}
{{Param|varname[]|The name of the field in the MySQL table.}}

{{NoReturn}}

<pawn>
enum E_PLAYER {
	// ...
	Name[MAX_PLAYER_NAME],
	Password[129]
};
new Player[MAX_PLAYERS][E_PLAYER];

// ...

new ORM:ormid = orm_create("players");

orm_addvar_string(ormid, Player[playerid][Name], MAX_PLAYER_NAME, "name");
orm_addvar_int(ormid, Player[playerid][Password], 129, "passwd");
</pawn>


== orm_setkey ==
{{Description|Sets a previously registered variable as key specified by the field name the variable has been linked to.}}

{{Parameters|ORM:id, varname[]}}
{{Param|ORM:id|The id of the ORM instance.}}
{{Param|varname[]|The name of the field in the MySQL table.}}

{{NoReturn}}

<pawn>
new ORM:ormid = orm_create("players");

orm_addvar_int(ormid, Player[playerid][ID], "id");
orm_addvar_float(ormid, Player[playerid][PosX], "pos_x");
// ...
orm_setkey(ormid, "id");
</pawn>




= MySQL functions =
{{note|Almost every function has a connectionHandle parameter. If you use only one database connection you don't need to mind it. Connection handle is 1 by default.}}


== mysql_log ==
{{Description|Controls what information will be logged.}}

{{note|Logging is always enabled by default, even if you don't call mysql_log.}}

{{Parameters|loglevel &#61; LOG_ERROR | LOG_WARNING, logtype &#61; LOG_TYPE_TEXT}}
{{Param|loglevel|Specifies what type of log messages will be logged (optional).}}
{{Param|logtype|Type of the logging (optional).}}

{{NoReturn}}

<pawn>
public OnGameModeInit()
{
	mysql_log(LOG_ERROR | LOG_WARNING, LOG_TYPE_HTML); //logs errors and warnings into a nice HTML file
	//...
	mysql_log(LOG_ERROR | LOG_WARNING | LOG_DEBUG); //logs errors, warnings and debug messages into a regular text file
	return 1;
}
</pawn>


== mysql_connect ==
{{Description|Connects to a MySQL server and database.}}

{{Note2|Do not use this function to reconnect to the database. Use [[MySQL/R33#mysql_reconnect|mysql_reconnect()]] instead.}}

{{Parameters|const host[], const user[], const database[], const password[], port &#61; 3306, bool:autoreconnect &#61; true}}
{{Param|const host[]|IP or hostname of the MySQL server.}}
{{Param|const user[]|Username of the account you want to connect to.}}
{{Param|const database[]|Name of the database you want to connect to.}}
{{Param|const password[]|Password of the account you want to connect to.}}
{{Param|port|Port of the MySQL server (optional).}}
{{Param|bool:autoreconnect|True to enable, false to disable automatic reconnection (optional).}}

{{Returns|Connection handle.}}

<pawn>
new MySQL;
// ...
public OnGameModeInit()
{
	MySQL = mysql_connect("127.0.0.1", "root", "mydatabase", "mypass");
	// ...
	return 1;
}
</pawn>


== mysql_close ==
{{Description|Closes the MySQL connection.}}

{{Parameters|connectionHandle &#61; 1, bool:wait &#61; true}}
{{Param|connectionHandle|The connection handle this will be processed on (optional).}}
{{Param|bool:wait|True if to wait until all queued queries are executed (optional).}}

{{Returns|1 on success, 0 on fail.}}

<pawn>
public OnGameModeExit()
{
	mysql_tquery(MySQL, "UPDATE `players` SET `is_online` = '0'", "", "");
	
	mysql_close(MySQL); //mysql_close will now halt the server until the query we just sent is executed.
	return 1;
}
</pawn>


== mysql_reconnect ==
{{Description|Reconnects to the selected connection handle.}}

{{Parameters|connectionHandle &#61; 1}}
{{Param|connectionHandle|The connection handle this will be processed on (optional).}}

{{NoReturn}}

<pawn>
//connection was lost for some reason, let's reconnect
mysql_reconnect();
</pawn>


== mysql_unprocessed_queries ==
{{Description|Returns the number of unprocessed (threaded) queries.}}

{{Parameters|connectionHandle &#61; 1}}
{{Param|connectionHandle|The connection handle this will be processed on (optional).}}

{{NoReturn}}

<pawn>
printf("There are %d unprocessed queries.", mysql_unprocessed_queries());
</pawn>



== mysql_errno ==
{{Description|Returns the error code of the error message from the previous MySQL operation.}}

{{Parameters|connectionHandle &#61; 1}}
{{Param|connectionHandle|The connection handle this will be processed on (optional).}}

{{Returns|Error code, 0 if no error occurred.}}

<pawn>
mysql_connect("127.0.0.1", "root", "mydatabase", "mypass");
if(mysql_errno() != 0) 
	print("Could not connect to database!");
</pawn>


== mysql_escape_string ==
{{Description|Escapes special characters in a string for the use in a SQL statement. It prepends backslashes to the following characters: \x00, \n, \r, \, ', " and \x1a.}}

{{Note2|Always use this function (if you don't use [[MySQL/R33#mysql_format|mysql_format()]] with the '%e' specifier) before inserting user inputs in a query. You can be victim of a [http://en.wikipedia.org/wiki/SQL_injection SQL injection] if you do not do so.}}

{{Parameters|const source[], destination[], connectionHandle &#61; 1, max_len &#61; sizeof(destination)}}
{{Param|const source[]|The string you want to be escaped.}}
{{Param|destination[]|The string to store escaped data in.}}
{{Param|connectionHandle|The connection handle this will be processed on (optional).}}
{{Param|max_len|The size of the destination (optional).}}

{{Returns|Length of escaped string.}}

{{Note|A database connection is required before using this function.}}

{{Note|It does not escape % and _. These are wildcards in MySQL if combined with LIKE, GRANT, or REVOKE.}}
{{Note2|You have to provide the size (''max_len'') by yourself if you use an enum-array as destination.}}

<pawn>
enum E_PLAYER {
	// ...
	LastMsg[128],
	// ...
};
new PlayerInfo[MAX_PLAYERS][E_PLAYER];
// ...
public OnPlayerText(playerid, text[])
{
	new escape[140*2];
	mysql_escape_string(text, escape); //string is now safe to be put in a query
	// ...
	mysql_escape_string(text, PlayerInfo[playerid][LastMsg], MySQL, 128); //correctly saves the escaped string into an enum-array
	return 1;
}
</pawn>


== mysql_format ==
{{Description| Allows you to format a string which you can safely use in a query.}}

{{Parameters|connectionHandle, output[], len, format[], {Float,_}:...}}
{{Param|connectionHandle|The connection handle this will be processed on.}}
{{Param|output[]|The string to save the result to.}}
{{Param|len|The size of the output.}}
{{Param|format[]|The format string.}}
{{Param|{Float,_}:...|Indefinite number of arguments.}}

{{Returns|Length of the formatted string.}}

==== Format strings ====
{|
! Placeholder ||  Meaning
|-
| %e || Escapes data directly without the need to call mysql_escape_string() before.
|-
| %s || Inserts a string.
|-
| %d / %i || Inserts an integer number.
|-
| %f || Inserts a floating point number.
|-
| %X || Inserts a hexadecimal number in uppercase.
|-
| %x || Inserts a hexadecimal number in lowercase.
|-
| %b || Inserts a binary number.
|}
The values for the placeholders follow in the exact same order as parameters in the call.

<pawn>
new query[128];
mysql_format(MySQL, query, sizeof(query), "SELECT * FROM `%s` WHERE `bar` = '%e' AND `foobar` = '%f' LIMIT %d", "foobar", "escape'me\"please", 1.2345, 1337);
// the variable 'query' contains now the formatted query (including the escaped string)
mysql_tquery(MySQL, query, "OnStuffSelected", "");
</pawn>


== mysql_tquery ==
{{Description|Sends a query which will be executed in another thread and calls the callback (if there is one) when the execution is finished.}}

{{Parameters|connectionHandle, query[], callback[], format[], {Float,_}:...}}
{{Param|connectionHandle|The connection handle this will be processed on.}}
{{Param|query[]|The query you want to execute.}}
{{Param|callback[]|The query you want to process.}}
{{Param|format[]|The format specifier string.}}
{{Param|{Float,_}:...|Indefinite number of arguments.}}

{{Returns|1 on success, 0 on fail.}}

{{Note|The callback must be a [[Public functions|public]] function. That means it has to be [[Public functions#Forwarding|forwarded]].}}

{{Note|The length of the format specifier must be the same as the number of arguments passed, or otherwise the query won't be executed!}}


==== Format specifiers ====
{|
! Specifier ||  Meaning
|-
| d/i || integer number
|-
| s|| string
|-
| f || floating point number
|}

<pawn>
forward OnPlayerDataLoaded(playerid);

public OnPlayerConnect(playerid)
{
	new query[128], pname[MAX_PLAYER_NAME];
	GetPlayerName(playerid, pname, sizeof(pname));
	mysql_format(MySQL, query, sizeof(query), "SELECT * FROM `players` WHERE `Name` = '%e'", pname);
	mysql_tquery(MySQL, query, "OnPlayerDataLoaded", "d", playerid);
	return 1;
}

public OnPlayerDataLoaded(playerid)
{
	//Query processed, you can now execute cache functions (like cache_get_row) here.
	new NumRows = cache_num_rows();
	printf("There are %d players with the same name.", NumRows);
	return 1;
}
</pawn>


== mysql_query ==
{{Description|This native sends a non-threaded query to the MySQL server. The SA:MP server (the main PAWN thread) waits until the query has been executed and then returns the cache handle.}}

{{Note2|It's highly recommended to thread all your queries (even INSERT & UPDATE).}}
{{Note2|Use [[MySQL/R33#cache_delete|cache_delete()]] if you don't need the query's result anymore or you will experience memory leaks.}}

{{Parameters|conhandle, query[], bool:use_cache &#61; true}}
{{Param|conhandle|The connection handle this will be processed on.}}
{{Param|query[]|The query you want to execute.}}
{{Param|bool:use_cache|Set to true if you intend to use the cache/result mysql_query returns (optional).}}

{{Returns|A valid cache-id if ''use_cache'' is set to true.}}

{{Note|If ''use_cache'' is set to false, there won't be any valid cache to use, so all cache-related natives wont work. You also don't need to call [[MySQL/R33#cache_delete|cache_delete()]] in this case.}}

<pawn>
new Cache:result = mysql_query(MySQL, "SELECT `id` FROM `players`");
printf("There are %d players in the database.", cache_num_rows());
cache_delete(result);
</pawn>



== mysql_stat ==
{{Description|Use this function to get some statistics of the MySQL server.}}

{{Parameters|destination[], connectionHandle &#61; 1, max_len &#61; sizeof(destination)}}
{{Param|const destination[]|The string to store extracted data in.}}
{{Param|connectionHandle|The connection handle this will be processed on (optional).}}
{{Param|max_len|The size of the destination string (optional).}}

{{NoReturn}}

<pawn>
new stats[150]; 
mysql_stat(stats); 
print(stats);

//Output would be something like:
// Uptime: 380  Threads: 1  Questions: 3  Slow queries: 0  Opens: 12  Flush tables: 1  
// Open tables: 6  Queries per second avg: 0.008
</pawn>


== mysql_get_charset ==
{{Description|Use this function to get the current character set in use.}}

{{Parameters|destination[], connectionHandle &#61; 1, max_len=sizeof(destination)}}
{{Param|destination[]|The string to store extracted data in.}}
{{Param|connectionHandle|The connection handle this will be processed on (optional).}}

{{Returns|1 on success, 0 on fail.}}

<pawn>new charset[20]; mysql_get_charset(charset);</pawn>


== mysql_set_charset ==
{{Description|Use this function to change the character set the connection uses. Very useful for servers which often process data with foreign characters.}}

{{Parameters|charset[], connectionHandle &#61; 1}}
{{Param|charset[]|Code of the character set you want to use.}}
{{Param|connectionHandle|The connection handle this will be processed on (optional).}}

{{Returns|1 on success, 0 on fail.}}

<pawn>
mysql_set_charset("utf8_unicode_ci");
</pawn>




= Cache functions =
{{Note|Make sure you use these functions (except cache_delete() and cache_set_active()) only if there is an active cache available.}}


== cache_get_data ==
{{Description|Assigns the number of rows and fields to two variables.}}

{{Parameters|&num_rows, &num_fields, connectionHandle &#61; 1}}
{{Param|&num_rows|The variable the number of rows will be assigned to.}}
{{Param|&num_fields|The variable the number of fields will be assigned to.}}
{{Param|connectionHandle|The connection handle this will be processed on (optional).}}

{{NoReturn}}

<pawn>
new rows, fields;
cache_get_data(rows, fields);
printf("There are %d rows and %d fields in the current result set (aka cache).", rows, fields);
</pawn>


== cache_get_row_count ==
{{Description|Returns the number of rows.}}

{{Parameters|connectionHandle &#61; 1}}
{{Param|connectionHandle|The connection handle this will be processed on (optional).}}

{{Returns|Number of rows.}}

<pawn>
printf("There are %d rows in the current result set.", cache_get_row_count());
</pawn>


== cache_get_field_count ==
{{Description|Returns the number of fields.}}

{{Parameters|connectionHandle &#61; 1}}
{{Param|connectionHandle|The connection handle this will be processed on (optional).}}

{{Returns|Number of fields.}}

<pawn>
printf("There are %d fields in the current result set.", cache_get_field_count());
</pawn>


== cache_get_field_name ==
{{Description|Retrieves a field's name specified by an index.}}

{{Parameters|field_index, destination[], connectionHandle &#61; 1, max_len &#61; sizeof(destination)}}
{{Param|field_index|The index of the field whose name to retrieve.}}
{{Param|destination[]|The string to store the name into.}}
{{Param|connectionHandle|The connection handle this will be processed on (optional).}}
{{Param|max_len|The size of the destination string (optional).}}

{{NoReturn}}

<pawn>
new field_name[32];
cache_get_field_name(0, field_name);
printf("The first field name in the current result set is '%s'.", field_name);
</pawn>



== cache_get_row ==
{{Description|Retrieves a value from the result set as a string.}}

{{Parameters|row, field_idx, destination[], connectionHandle &#61; 1, max_len &#61; sizeof(destination)}}
{{Param|row|The row's index (starts at '0').}}
{{Param|field_idx|The index of the field (starts at '0').}}
{{Param|destination[]|The string to store the data into.}}
{{Param|connectionHandle|The connection handle this will be processed on (optional).}}
{{Param|max_len|The size of the destination string (optional).}}

{{NoReturn}}

{{Note2|You have to provide the size (''max_len'') by yourself if you use an enum-array as destination.}}

<pawn>
new dest[128];
cache_get_row(0, 0, dest);
printf("The very first value in the current result set is '%s'.", dest);
</pawn>


== cache_get_row_int ==
{{Description|Retrieves a value from the result set as a integer (normal number).}}

{{Parameters|row, field_idx, connectionHandle &#61; 1}}
{{Param|row|The row's index (starts at '0').}}
{{Param|field_idx|The index of the field (starts at '0').}}
{{Param|connectionHandle|The connection handle this will be processed on (optional).}}

{{Returns|Retrieved value as integer (number).}}

<pawn>
new int_dest = cache_get_row_int(3, 0);
printf("The number stored in the fourth row and first field is '%d'.", int_dest);
</pawn>


== cache_get_row_float ==
{{Description|Retrieves a value from the result set as a floating point number.}}

{{Parameters|row, field_idx, connectionHandle &#61; 1}}
{{Param|row|The row's index (starts at '0').}}
{{Param|field_idx|The index of the field (starts at '0').}}
{{Param|connectionHandle|The connection handle this will be processed on (optional).}}

{{Returns|Retrieved value as floating point number.}}

<pawn>
new Float:float_dest = cache_get_row_float(3, 4);
printf("The floating point number stored in the fourth row and fifth field is '%f'.", float_dest);
</pawn>



== cache_get_field_content ==
{{Description|Retrieves a value from the result set as a string.}}

{{Parameters|row, const field_name[], destination[], connectionHandle &#61; 1, max_len &#61; sizeof(destination)}}
{{Param|row|The row's index (starts at '0').}}
{{Param|const field_name[]|The field's name.}}
{{Param|destination[]|The string to store the data into.}}
{{Param|connectionHandle|The connection handle this will be processed on (optional).}}
{{Param|max_len|The size of the destination string (optional).}}

{{NoReturn}}

{{Note2|You have to provide the size (''max_len'') by yourself if you use an enum-array as destination.}}

<pawn>
new dest[128];
cache_get_field_content(0, "name", dest);
printf("The value in the field 'name' is '%s'.", dest);
</pawn>


== cache_get_field_content_int ==
{{Description|Retrieves a value from the result set as an integer (normal number).}}

{{Parameters|row, const field_name[], connectionHandle &#61; 1}}
{{Param|row|The row's index (starts at '0').}}
{{Param|const field_name[]|The field's name.}}
{{Param|connectionHandle|The connection handle this will be processed on (optional).}}

{{Returns|Retrieved value as integer (normal number).}}

<pawn>
new int_dest = cache_get_field_content_int(2, "money");
printf("The value in the third row and in the field 'money' is '%d'.", int_dest);
</pawn>


== cache_get_field_content_float ==
{{Description|Retrieves a value from the result set as an floating point number.}}

{{Parameters|row, const field_name[], connectionHandle &#61; 1}}
{{Param|row|The row's index (starts at '0').}}
{{Param|const field_name[]|The field's name.}}
{{Param|connectionHandle|The connection handle this will be processed on (optional).}}

{{Returns|Retrieved value as floating point number.}}

<pawn>
new Float:float_dest = cache_get_field_content_float(3, "pos_x");
printf("The value in the fourth row and in the field 'pos_x' is '%f'.", float_dest);
</pawn>



== cache_save ==
{{Description|Saves the active cache in the memory and returns an cache-id to access it for later use.}}

{{Parameters|connectionHandle &#61; 1}}
{{Param|connectionHandle|The connection handle this will be processed on (optional).}}

{{Returns|Valid cache-id on success or 0 on failure.}}

<pawn>
enum E_PLAYER {
	ID,
	Name[MAX_PLAYER_NAME],
	Cache:Data,
	// ...
};
new Player[MAX_PLAYERS][E_PLAYER];


public OnPlayerConnect(playerid)
{
	new query[128];
	GetPlayerName(playerid, Player[playerid][Name], MAX_PLAYER_NAME);
	mysql_format(MySQL, query, sizeof(query), "SELECT * FROM `players` WHERE `name` = '%e' LIMIT 1", Player[playerid][Name]);
	mysql_tquery(MySQL, query, "OnPlayerDataLoaded", "d", playerid);
	
	return 1;
}

forward OnPlayerDataLoaded(playerid);
public OnPlayerDataLoaded(playerid)
{
	if(cache_num_rows() == 1)
	{
	
		//save the cache for later use
		Player[playerid][Data] = cache_save();
	
		//show login dialog
		// ShowPlayerDialog(playerid, ...
	}
	// else //show register dialog
		// ShowPlayerDialog(playerid, ...
	return 1;
}
</pawn>


== cache_delete ==
{{Description|Deletes the specified cache from the memory.}}

{{Parameters|Cache:cache_id, connectionHandle &#61; 1}}
{{Param|Cache:cache_id|The cache-id which should be deleted.}}
{{Param|connectionHandle|The connection handle this will be processed on (optional).}}

{{Returns|1 on success, 0 on fail.}}

<pawn>
enum E_PLAYER {
	ID,
	Name[MAX_PLAYER_NAME],
	Cache:Data,
	// ...
};
new Player[MAX_PLAYERS][E_PLAYER];


public OnPlayerDisconnect(playerid, reason)
{
	cache_delete(Player[playerid][Data]);
	// ...
	return 1;
}
</pawn>


== cache_set_active ==
{{Description|Sets the specified cache as the active cache.}}

{{Note|If you specify '0' as cache-id, the active cache will be unset, thus there won't be any cache active.}}

{{Parameters|Cache:cache_id, connectionHandle &#61; 1}}
{{Param|Cache:cache_id|The cache-id which should be set as active.}}
{{Param|connectionHandle|The connection handle this will be processed on (optional).}}

{{Returns|1 on success, 0 on fail.}}

<pawn>
enum E_PLAYER {
	ID,
	Name[MAX_PLAYER_NAME],
	Cache:Data,
	Money,
	Float:PosX,
	// ...
};
new Player[MAX_PLAYERS][E_PLAYER];


public OnDialogResponse(playerid, dialogid, response, listitem, inputtext[])
{
	switch(dialogid)
	{
		// ...
		case DIALOG_LOGIN:
		{
			//if password matches
			cache_set_active(Player[playerid][Data]);
			
			Player[playerid][Money] = cache_get_field_content_int(0, "money");
			Player[playerid][PosX] = cache_get_field_content_float(0, "pos_x");
			// ...
			cache_set_active(Cache:0); //unset active cache
		}
		// ...
		default:
			return 0;
	}
	return 1;
}
</pawn>



== cache_affected_rows ==
{{Description|Returns the number of affected rows if the query was an INSERT, UPDATE, REPLACE or DELETE query.}}

{{Parameters|connectionHandle &#61; 1}}
{{Param|connectionHandle|The connection handle this will be processed on (optional).}}

{{Note|If the last query was a DELETE query with no WHERE clause, all of the records will have been deleted from the table but this function will return zero.}}

{{Returns|Number of affected rows.}}

<pawn>
mysql_tquery(MySQL, "DELETE FROM mylogs WHERE log_id > 10", "OnLogsDeleted", "");
// ...
public OnLogsDeleted()
{
	printf("%d logs deleted!", cache_affected_rows());
	return 1;
}
</pawn>


== cache_insert_id ==
{{Description|Retrieves the ID generated for an AUTO_INCREMENT column by the sent query (usually INSERT).}}

{{Parameters|connectionHandle &#61; 1}}
{{Param|connectionHandle|The connection handle this will be processed on (optional).}}

{{Returns|ID generated for an AUTO_INCREMENT column.}}

<pawn>
mysql_tquery(MySQL, "INSERT INTO `players` (`name`, `password`) VALUES ('Ownage', MD5('mypass')", "OnPlayerRegister", "d", playerid);
// ...
public OnPlayerRegister(playerid)
{
	printf("New player registered with ID '%d'.", cache_insert_id());
	return 1;
}
</pawn>


== cache_warning_count ==
{{Description|Returns the number of warnings the sent query generated.}}

{{Parameters|connectionHandle &#61; 1}}
{{Param|connectionHandle|The connection handle this will be processed on (optional).}}

{{Returns|Number of warnings, 0 if none.}}

<pawn>
mysql_tquery(MySQL, "UPDATE `notable` SET something=42 WHERE nofield=0", "OnStuffUpdated", "");
// ...
public OnStuffUpdated()
{
	if(cache_warning_count())
		printf("Some warnings occured!!");
	
	return 1;
}
</pawn>




= Plugin callbacks =


== OnQueryError ==
{{Description|This callback is called when an error occurs while processing a query.}}

{{Note|Common error codes for [http://dev.mysql.com/doc/refman/5.1/en/error-messages-client.html client] and [http://dev.mysql.com/doc/refman/5.1/en/error-messages-server.html server].}}

{{Parameters|errorid, error[], callback[], query[], connectionHandle}}
{{Param|errorid|ID of the error.}}
{{Param|error[]|Error message.}}
{{Param|callback[]|Name of the callback. It equals to "" (nothing, empty) if it's not used.}}
{{Param|query[]|Query which was executed.}}
{{Param|connectionHandle|The connection handle this was processed on.}}

{{NoReturnCallback}}

<pawn>
public OnQueryError(errorid, error[], callback[], query[], connectionHandle)
{
	switch(errorid)
	{
		case CR_SERVER_GONE_ERROR:
		{
			printf("Lost connection to server, trying reconnect...");
			mysql_reconnect(connectionHandle);
		}
		case ER_SYNTAX_ERROR:
		{
			printf("Something is wrong in your syntax, query: %s",query);
		}
	}
	return 1;
}
</pawn>

